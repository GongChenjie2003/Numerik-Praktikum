#include <iostream>
#include <filesystem>
#include <vector>
#include <string>
#include <iomanip>
#include <unordered_map>
#include <sstream>
#include <fstream>
using namespace std;
namespace fs = std::filesystem;
vector<vector<double>> readCundU(const fs::path& file_path) {      //Einlesen von C oder U, funktioniert fuer beide; nimmt filepath von main, gibt vectors zurueck
    ifstream file(file_path);
    if (!file.is_open()) {
        cerr << "Error: Cannot open file " << file_path << endl;
        return {};
    }

    vector<vector<double>> vectors;
    string line;
    int current_line = 1;
    int Anzahl;

    
    while (getline(file, line)) {
        if (current_line == 22) {                                 //ueberspringt 22 Zeile fuer C und U
            Anzahl = stoi(line);
            break;
        }
        ++current_line;
    }

  
    while (getline(file, line) && current_line <= 22 + Anzahl) {
        size_t start = line.find('(');
        size_t end = line.find(')');
        if (start != string::npos && end != string::npos && end > start) {
            string numbers = line.substr(start + 1, end - start - 1);
            istringstream iss(numbers);
            vector<double> vec(3);
            if (iss >> vec[0] >> vec[1] >> vec[2]) {
                vectors.push_back(vec);
            }
        }
        ++current_line;
    }
    cout << file_path << " eingelesen." << endl;
    file.close();
    return vectors;                                     //gibt vector C oder U zurueck
}

//Koordinaten konvertieren zu string fuer Hash Table
//nimmt vector C, gibt fuer jeden x/y/z Wert ein Schluessel, die Werte werden in einem Feld gespeichert; falls ein Schuessel abgeruft, den zupassenden Wert wird ausgefunden
string make_key(double x, double y, double z) {        //"x,y,z" = Achse fuer vector C
    return to_string(x) + "," + to_string(y) + "," + to_string(z);  //definiert key in string
}

// Berechnung der Gradienten
vector<double> Abl(const vector<vector<double>> &C, const vector<vector<double>> &U,
                                    unordered_map<string, int> &point_index, int i, double dx, double dy, double dz) {
    double x = C[i][0], y = C[i][1], z = C[i][2]; // [i] := Index der Zellemittelpunkten(C) (kommt aus main); [0,1,2] := Koordinaten x,y,z
    string key_plus = make_key(x + dx, y + dy, z + dz);
    string key_minus = make_key(x - dx, y - dy, z - dz);

    vector<double> diff(3, 0.0);     // 3 := Anzahl der Dimension; 0.0 := Anfangswert; berechnet die Differenzen zwischen zwei U vectors
    if (point_index.count(key_plus) && point_index.count(key_minus)) {   // count := Funktion, nachprueft ob "key" existiert
        // fuer interne Zelle
        int idx_plus = point_index[key_plus];      //idx_plus := C mit dem groesseren Koordinatenwert fuer x/y/z einzel 
        int idx_minus = point_index[key_minus];    //idx_minus := C mit dem kleineren Koordinatenwert fuer x/y/z einzel
        for (int j = 0; j < 3; ++j) {
            diff[j] = (U[idx_plus][j] - U[idx_minus][j])/0.1;
        }                                       // fuer jede Richtung gibt es zwei Randzellen(Anfangszelle, Endeszelle)
    } else if (point_index.count(key_plus)) {//fuer Anfangsrandzellen(nur Zellekoordinaten +0.4 existieren, kein kleinere Koordinaten gibt)
        int idx_plus = point_index[key_plus];
        for (int j = 0; j < 3; ++j) {
            diff[j] = (U[idx_plus][j] - U[i][j])/0.1; 
        }
    } else if (point_index.count(key_minus)) {//fuer Endesrandzellen(nur Zellekoordinaten -0.4 existieren, kein groessere Koordinaten gibt)
        int idx_minus = point_index[key_minus];
        for (int j = 0; j < 3; ++j) {
            diff[j] = (U[i][j] - U[idx_minus][j])/0.1;
        }
    }
    return diff;       //gibt ein vector zurueck
}
void einschreiben_von_gradienten(const vector<vector<vector<double>>>& results, const fs::path& file_path){ //schreibt die Gradienten in die Datei grad(U) ein
    ifstream input_file(file_path);     //oeffnet die Datei grad(U)
    if (!input_file.is_open()) {
        cerr << "Error: Cannot open file for reading: " << file_path << endl;
        return;
    }

    vector<string> file_lines;
    string line;

    while (getline(input_file, line)) {    //speichert den originalen Inhalt der Datei
        file_lines.push_back(line);
    }
    input_file.close();

    // bildet ein string fuer Gradienten vector
    vector<string> new_lines;
    for (const auto& matrix : results) {
        ostringstream gradient;
        gradient << "( ";  
        for (const auto& row : matrix) {
            for (size_t i = 0; i < row.size(); ++i) {
                gradient << row[i];
                if (i < row.size() - 1) gradient << " "; 
            }
            gradient << " ";
        }
        gradient << ")"; 
        new_lines.push_back(gradient.str());
    }

    // fuegt die Gradienten auf Zeile 24 ein
    file_lines.insert(file_lines.begin() + 23, new_lines.begin(), new_lines.end());

    // schreibt die ganze Datei zurueck
    ofstream output_file(file_path);
    if (!output_file.is_open()) {
        cerr << "Error: Cannot open file for writing: " << file_path << endl;
        return;
    }

    for (const auto& file_line : file_lines) {
        output_file << file_line << "\n";
    }

    output_file.close();
}
void einschreiben_von_Q(const vector<double>& Q, const fs::path& file_path) { 
    ifstream input_file(file_path);     
    if (!input_file.is_open()) {
        cerr << "Error: Cannot open file for reading: " << file_path << endl;
        return;
    }

    vector<string> file_lines;
    string line;

    while (getline(input_file, line)) {    
        file_lines.push_back(line);
    }
    input_file.close();

    vector<string> new_lines;
    for (const auto& value : Q) {
        ostringstream ss;
        ss << value;
        new_lines.push_back(ss.str());
    }

    file_lines.insert(file_lines.begin() + 22, new_lines.begin(), new_lines.end());

    ofstream output_file(file_path);
    if (!output_file.is_open()) {
        cerr << "Error: Cannot open file for writing: " << file_path << endl;
        return;
    }

    for (const auto& file_line : file_lines) {
        output_file << file_line << "\n";
    }
    output_file.close();
}
vector<double> Q_Kriterium(const vector<vector<vector<double>>>&results){
    vector<double> Q_Kriterium(results.size(), 0.0);
    for (int i = 0; i < results.size(); i++){
        Q_Kriterium[i] = (pow(results[i][0][0]+results[i][1][1]+results[i][2][2],2.0) - (results[i][0][0]
        *results[i][0][0]+results[i][0][1]*results[i][1][0]+results[i][0][2]*results[i][2][0]-(results[i][1][0]
        *results[i][0][1]+results[i][1][1]*results[i][1][1]+results[i][1][2]*results[i][2][1])-(results[i][2][0]
        *results[i][0][2]+results[i][2][1]*results[i][1][2]+results[i][2][2]*results[i][2][2])))*0.5;
    }
    return Q_Kriterium;
}

unordered_map<string, string> displaySettings(const fs::path& file_path) {
    ifstream file(file_path);
    if (!file.is_open()) {
        cerr << "Error: Cannot open file " << file_path << endl;
        return {};
    }

    unordered_map<string, string> settings;
    string line;
    while (getline(file, line)) {
        size_t pos = line.find('=');
        if (pos != string::npos) {
            string key = line.substr(0, pos);
            string value = line.substr(pos + 1);
            settings[key] = value;
        }
    }
    file.close();
    return settings;
}

fs::path create_file(const fs::path& source_folder_path, const fs::path& target_folder_path, string file_name){  
    fs::path source_file = source_folder_path / file_name;
    fs::path target_file = target_folder_path / file_name;
    fs::copy_file(source_file, target_file, fs::copy_options::overwrite_existing);//kopiert die leere Datei und speichert in tragetfolder
    cout << "File copied successfully: " << target_file << endl;

    return target_file;
}


// Hilfsfunktion, um alle Zeitordner aus dem Basisverzeichnis zu lesen und zu sortieren

vector<double> get_time_steps(const fs::path& base_path) {
    vector<double> time_steps;

    for (const auto& entry : fs::directory_iterator(base_path)) {
        if (entry.is_directory()) {
            try {
                double time = stod(entry.path().filename().string());
                time_steps.push_back(time);
            } catch (const invalid_argument&) {
                continue; // Überspringe Ordner, die keine Zahl im Namen haben
            }
        }
    }

    sort(time_steps.begin(), time_steps.end());
    return time_steps;
}

// Hauptfunktion zur Verarbeitung der Zeitordner

void process_simulation_data(const fs::path& base_path) {
    vector<double> time_steps = get_time_steps(base_path);

    for (double time : time_steps) {
        ostringstream oss;
        oss << fixed << setprecision(1) << time; // Formatiere den Zeitwert mit einer Nachkommastelle
        string folder_name = oss.str();

        fs::path current_folder = base_path / folder_name; // Erstelle Pfad zum Zeitordner
        cout << "Processing time step folder: " << current_folder << endl;

        // Pfade für die relevanten Dateien
        fs::path C_file = current_folder / "C";          // Datei für "C"
        fs::path U_file = current_folder / "U";          // Datei für "U"
        fs::path grad_U_file = current_folder / "grad(U)"; // Zieldatei für Gradienten
        fs::path Q_file = current_folder / "Q";          // Zieldatei für Q-Kriterium

        // Prüfe, ob die Eingabedateien existieren
        if (!fs::exists(C_file) || !fs::exists(U_file)) {
            cerr << "Error: Missing C or U file in folder " << current_folder << endl;
            continue;
        }

        // Schritt 1: Dateien einlesen
        vector<vector<double>> C = readCundU(C_file.string()); // Deine existierende Funktion zum Einlesen
        vector<vector<double>> U = readCundU(U_file.string()); // Deine existierende Funktion zum Einlesen

        // Schritt 2: Gradienten berechnen
        vector<vector<vector<double>>> gradients;
        unordered_map<string, int> point_index;

        // Erstelle eine Hash-Tabelle für Punktindizes (z. B. basierend auf den Koordinaten)
        for (int i = 0; i < C.size(); ++i) {
            point_index[make_key(C[i][0], C[i][1], C[i][2])] = i; // Deine Funktion make_key
        }

        // Berechne die Gradienten für alle Punkte
        for (int i = 0; i < C.size(); ++i) {
            vector<vector<double>> matrix(3, vector<double>(3, 0.0));
            matrix[0] = Abl(C, U, point_index, i, 0.05, 0.0, 0.0); // x-Richtung
            matrix[1] = Abl(C, U, point_index, i, 0.0, 0.05, 0.0); // y-Richtung
            matrix[2] = Abl(C, U, point_index, i, 0.0, 0.0, 0.05); // z-Richtung
            gradients.push_back(matrix);
        }

        // Schritt 3: Q-Kriterium berechnen
        vector<double> Q = Q_Kriterium(gradients); // Deine existierende Funktion Q_Kriterium

        // Schritt 4: Ergebnisse speichern
        einschreiben_von_gradienten(gradients, grad_U_file.string()); // Gradienten speichern
        einschreiben_von_Q(Q, Q_file.string());                       // Q-Kriterium speichern

        cout << "Processed folder: " << folder_name << endl;
    }
}

int main() {
    fs::path base_path = ".\\Simulation_Umstroemung_eines_Wuerfels"; // Basisverzeichnis der Simulation

    process_simulation_data(base_path); // Verarbeite alle Zeitordner
    return 0;
}

